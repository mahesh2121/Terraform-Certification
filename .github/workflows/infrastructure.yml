name: Infrastructure Deployment

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: Infrastructure Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./noncloudproviders
    env:
      TF_WORKSPACE: main
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install terraform-docs
      run: |
        wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz
        tar -xzf terraform-docs-v0.16.0-linux-amd64.tar.gz
        sudo mv terraform-docs /usr/local/bin/

    - name: Generate Terraform docs
      run: terraform-docs markdown table --output-file README.md .

    - name: Terraform setup
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

    - name: Terraform format
      run: terraform fmt -check

    - name: Terraform init
      run: terraform init

    - name: Terraform validate
      run: terraform validate

    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -out=tfplan

    - name: Attach terraform plan output
      uses: actions/github-script@v5
      if: ${{ github.event_name == 'pull_request' }}
      with:
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('tfplan', 'utf8');
          const output = `
          <details><summary>Terraform Plan Output</summary>

          \`\`\`${planOutput}\`\`\`

          </details>
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Check terraform plan status
      if: ${{ steps.plan.outcome == 'failure' }}
      run: exit 1

    - name: Terraform Apply
      if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
      run: terraform apply -auto-approve tfplan
